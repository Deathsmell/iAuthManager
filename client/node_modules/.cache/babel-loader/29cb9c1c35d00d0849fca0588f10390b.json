{"ast":null,"code":"import { useCallback, useContext, useEffect, useState } from \"react\";\nimport { useMessage } from \"./message.hook\";\nimport { useHttp } from \"./http.hook\";\nimport { AuthContext } from \"../context/AuthContext\";\nimport { UserContext } from \"../context/UserContext\";\n\nconst useManage = () => {\n  const {\n    request\n  } = useHttp();\n  const message = useMessage();\n  const [change, setChange] = useState(false);\n  const {\n    token\n  } = useContext(AuthContext);\n  const [, setUsers] = useContext(UserContext);\n  const getUsers = useCallback(setUsers => request('api/users', 'GET', null, {\n    Authorization: `Bearer ${token}`\n  }).then(setUsers).catch(() => setUsers([])), [request, token]);\n  useEffect(() => {\n    if (token) setUsers(getUsers(setUsers));\n  }, [token, change, setUsers, getUsers]);\n\n  const requestToServer = async (action, users) => {\n    if (users && token) {\n      const body = await request(`api/${action}`, 'POST', {\n        users\n      }, {\n        Authorization: `Bearer ${token}`\n      });\n\n      if (body) {\n        message(body);\n      }\n\n      setChange(!change);\n    } else {\n      message(`Incorrect token`);\n    }\n  };\n\n  const blockUsers = async unblockedUsers => {\n    return await requestToServer('block', unblockedUsers);\n  };\n\n  const unblockUsers = async blockedUsers => {\n    return await requestToServer('unblock', blockedUsers);\n  };\n\n  const deleteUsers = async currentUsers => {\n    return await requestToServer('delete', currentUsers);\n  };\n\n  return {\n    blockUsers,\n    unblockUsers,\n    deleteUsers,\n    getUsers\n  };\n};\n\nexport default useManage;","map":{"version":3,"sources":["/home/deathsmell/WebstormProjects/iAuthManager/client/src/hooks/manage.hook.js"],"names":["useCallback","useContext","useEffect","useState","useMessage","useHttp","AuthContext","UserContext","useManage","request","message","change","setChange","token","setUsers","getUsers","Authorization","then","catch","requestToServer","action","users","body","blockUsers","unblockedUsers","unblockUsers","blockedUsers","deleteUsers","currentUsers"],"mappings":"AAAA,SAAQA,WAAR,EAAqBC,UAArB,EAAiCC,SAAjC,EAA4CC,QAA5C,QAA2D,OAA3D;AACA,SAAQC,UAAR,QAAyB,gBAAzB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAAQC,WAAR,QAA0B,wBAA1B;AACA,SAAQC,WAAR,QAA0B,wBAA1B;;AAEA,MAAMC,SAAS,GAAG,MAAM;AACpB,QAAM;AAACC,IAAAA;AAAD,MAAYJ,OAAO,EAAzB;AACA,QAAMK,OAAO,GAAGN,UAAU,EAA1B;AACA,QAAM,CAACO,MAAD,EAASC,SAAT,IAAsBT,QAAQ,CAAC,KAAD,CAApC;AACA,QAAM;AAACU,IAAAA;AAAD,MAAUZ,UAAU,CAACK,WAAD,CAA1B;AACA,QAAM,GAAGQ,QAAH,IAAeb,UAAU,CAACM,WAAD,CAA/B;AAGA,QAAMQ,QAAQ,GAAGf,WAAW,CAAEc,QAAD,IAAcL,OAAO,CAAC,WAAD,EAAc,KAAd,EAAqB,IAArB,EAA2B;AAACO,IAAAA,aAAa,EAAG,UAASH,KAAM;AAAhC,GAA3B,CAAP,CACtCI,IADsC,CACjCH,QADiC,EAEtCI,KAFsC,CAEhC,MAAMJ,QAAQ,CAAC,EAAD,CAFkB,CAAf,EAEG,CAACL,OAAD,EAASI,KAAT,CAFH,CAA5B;AAKAX,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIW,KAAJ,EAAWC,QAAQ,CAACC,QAAQ,CAACD,QAAD,CAAT,CAAR;AACd,GAFQ,EAEN,CAACD,KAAD,EAAQF,MAAR,EAAgBG,QAAhB,EAAyBC,QAAzB,CAFM,CAAT;;AAKA,QAAMI,eAAe,GAAG,OAAOC,MAAP,EAAeC,KAAf,KAAyB;AAC7C,QAAIA,KAAK,IAAIR,KAAb,EAAoB;AAChB,YAAMS,IAAI,GAAG,MAAMb,OAAO,CAAE,OAAMW,MAAO,EAAf,EAAkB,MAAlB,EAA0B;AAACC,QAAAA;AAAD,OAA1B,EACtB;AAACL,QAAAA,aAAa,EAAG,UAASH,KAAM;AAAhC,OADsB,CAA1B;;AAEA,UAAIS,IAAJ,EAAU;AACNZ,QAAAA,OAAO,CAACY,IAAD,CAAP;AACH;;AACDV,MAAAA,SAAS,CAAC,CAACD,MAAF,CAAT;AACH,KAPD,MAOO;AACHD,MAAAA,OAAO,CAAE,iBAAF,CAAP;AACH;AACJ,GAXD;;AAgBA,QAAMa,UAAU,GAAG,MAAOC,cAAP,IAA0B;AACzC,WAAO,MAAML,eAAe,CAAC,OAAD,EAAUK,cAAV,CAA5B;AACH,GAFD;;AAIA,QAAMC,YAAY,GAAG,MAAOC,YAAP,IAAwB;AACzC,WAAO,MAAMP,eAAe,CAAC,SAAD,EAAYO,YAAZ,CAA5B;AACH,GAFD;;AAIA,QAAMC,WAAW,GAAG,MAAOC,YAAP,IAAwB;AACxC,WAAO,MAAMT,eAAe,CAAC,QAAD,EAAWS,YAAX,CAA5B;AACH,GAFD;;AAKA,SAAO;AAACL,IAAAA,UAAD;AAAaE,IAAAA,YAAb;AAA2BE,IAAAA,WAA3B;AAAwCZ,IAAAA;AAAxC,GAAP;AAEH,CAjDD;;AAmDA,eAAeP,SAAf","sourcesContent":["import {useCallback, useContext, useEffect, useState} from \"react\";\nimport {useMessage} from \"./message.hook\";\nimport {useHttp} from \"./http.hook\";\nimport {AuthContext} from \"../context/AuthContext\";\nimport {UserContext} from \"../context/UserContext\";\n\nconst useManage = () => {\n    const {request} = useHttp()\n    const message = useMessage();\n    const [change, setChange] = useState(false);\n    const {token} = useContext(AuthContext);\n    const [, setUsers] = useContext(UserContext);\n\n\n    const getUsers = useCallback((setUsers) => request('api/users', 'GET', null, {Authorization: `Bearer ${token}`})\n        .then(setUsers)\n        .catch(() => setUsers([])),[request,token])\n\n\n    useEffect(() => {\n        if (token) setUsers(getUsers(setUsers))\n    }, [token, change, setUsers,getUsers])\n\n\n    const requestToServer = async (action, users) => {\n        if (users && token) {\n            const body = await request(`api/${action}`, 'POST', {users},\n                {Authorization: `Bearer ${token}`})\n            if (body) {\n                message(body)\n            }\n            setChange(!change)\n        } else {\n            message(`Incorrect token`)\n        }\n    }\n\n\n\n\n    const blockUsers = async (unblockedUsers) => {\n        return await requestToServer('block', unblockedUsers)\n    }\n\n    const unblockUsers = async (blockedUsers) => {\n        return await requestToServer('unblock', blockedUsers)\n    }\n\n    const deleteUsers = async (currentUsers) => {\n        return await requestToServer('delete', currentUsers)\n    }\n\n\n    return {blockUsers, unblockUsers, deleteUsers, getUsers,}\n\n}\n\nexport default useManage"]},"metadata":{},"sourceType":"module"}