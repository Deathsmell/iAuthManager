{"ast":null,"code":"import { useCallback, useState } from 'react';\nexport const useHttp = () => {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const request = useCallback(async (url, method = 'GET', body = null, headers = {}) => {\n    setLoading(true);\n\n    try {\n      if (body) {\n        body = JSON.stringify(body);\n        headers['Content-Type'] = 'application/json';\n      }\n\n      const response = await fetch(url, {\n        method,\n        body,\n        headers\n      });\n      let data;\n\n      try {\n        data = await response.json();\n      } catch (e) {\n        const error = data.message ? data.message : \"Unsupported json\";\n        setError(error);\n      }\n\n      if (!response.ok) {\n        setError(data.message || {\n          message: \"useHttp response error\"\n        });\n      }\n\n      setLoading(false);\n      return data;\n    } catch (e) {\n      setLoading(false);\n      throw e;\n    }\n  }, []);\n  const clearError = useCallback(() => setError(null), []);\n  return {\n    loading,\n    error,\n    request,\n    clearError\n  };\n};","map":{"version":3,"sources":["/home/deathsmell/WebstormProjects/iAuthManager/client/src/hooks/http.hook.js"],"names":["useCallback","useState","useHttp","loading","setLoading","error","setError","request","url","method","body","headers","JSON","stringify","response","fetch","data","json","e","message","ok","clearError"],"mappings":"AAAA,SAAQA,WAAR,EAAqBC,QAArB,QAAoC,OAApC;AAEA,OAAO,MAAMC,OAAO,GAAG,MAAM;AACzB,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBH,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACI,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAAC,IAAD,CAAlC;AAEA,QAAMM,OAAO,GAAGP,WAAW,CAAC,OAAOQ,GAAP,EAAYC,MAAM,GAAG,KAArB,EAA4BC,IAAI,GAAG,IAAnC,EAAyCC,OAAO,GAAG,EAAnD,KAA0D;AAClFP,IAAAA,UAAU,CAAC,IAAD,CAAV;;AACA,QAAI;AACA,UAAIM,IAAJ,EAAU;AACNA,QAAAA,IAAI,GAAGE,IAAI,CAACC,SAAL,CAAeH,IAAf,CAAP;AACAC,QAAAA,OAAO,CAAC,cAAD,CAAP,GAA0B,kBAA1B;AACH;;AAED,YAAMG,QAAQ,GAAG,MAAMC,KAAK,CAACP,GAAD,EAAM;AAC9BC,QAAAA,MAD8B;AAE9BC,QAAAA,IAF8B;AAG9BC,QAAAA;AAH8B,OAAN,CAA5B;AAMA,UAAIK,IAAJ;;AACA,UAAI;AACAA,QAAAA,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAb;AACH,OAFD,CAEE,OAAOC,CAAP,EAAU;AACR,cAAMb,KAAK,GAAGW,IAAI,CAACG,OAAL,GAAeH,IAAI,CAACG,OAApB,GAA8B,kBAA5C;AACAb,QAAAA,QAAQ,CAACD,KAAD,CAAR;AACH;;AAED,UAAI,CAACS,QAAQ,CAACM,EAAd,EAAkB;AACdd,QAAAA,QAAQ,CAACU,IAAI,CAACG,OAAL,IAAgB;AAACA,UAAAA,OAAO,EAAE;AAAV,SAAjB,CAAR;AACH;;AACDf,MAAAA,UAAU,CAAC,KAAD,CAAV;AACA,aAAOY,IAAP;AACH,KAzBD,CAyBE,OAAOE,CAAP,EAAU;AACRd,MAAAA,UAAU,CAAC,KAAD,CAAV;AACA,YAAMc,CAAN;AACH;AACJ,GA/B0B,EA+BxB,EA/BwB,CAA3B;AAiCA,QAAMG,UAAU,GAAGrB,WAAW,CAAC,MAAMM,QAAQ,CAAC,IAAD,CAAf,EAAuB,EAAvB,CAA9B;AAEA,SAAO;AAACH,IAAAA,OAAD;AAAUE,IAAAA,KAAV;AAAiBE,IAAAA,OAAjB;AAA0Bc,IAAAA;AAA1B,GAAP;AACH,CAxCM","sourcesContent":["import {useCallback, useState} from 'react'\n\nexport const useHttp = () => {\n    const [loading, setLoading] = useState(false)\n    const [error, setError] = useState(null)\n\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {}) => {\n        setLoading(true)\n        try {\n            if (body) {\n                body = JSON.stringify(body)\n                headers['Content-Type'] = 'application/json'\n            }\n\n            const response = await fetch(url, {\n                method,\n                body,\n                headers\n            })\n\n            let data\n            try {\n                data = await response.json()\n            } catch (e) {\n                const error = data.message ? data.message : \"Unsupported json\"\n                setError(error)\n            }\n\n            if (!response.ok) {\n                setError(data.message || {message: \"useHttp response error\"})\n            }\n            setLoading(false)\n            return data\n        } catch (e) {\n            setLoading(false)\n            throw e\n        }\n    }, [])\n\n    const clearError = useCallback(() => setError(null), [])\n\n    return {loading, error, request, clearError}\n}"]},"metadata":{},"sourceType":"module"}