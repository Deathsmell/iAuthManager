{"ast":null,"code":"import { useCallback, useContext, useEffect } from 'react';\nimport { UserContext } from \"../context/UserContext\";\nimport { SelectContext } from \"../context/SelectContext\";\nexport const useSelect = () => {\n  const [users] = useContext(UserContext);\n  const [selectedUser, setSelectedUser] = useContext(SelectContext);\n  const setChecked = useCallback(boolean => {\n    return id => {\n      const elementById = document.getElementById(id.id ? id.id : \"all\");\n\n      if (elementById) {\n        elementById.checked = boolean;\n      }\n    };\n  }, []);\n  useEffect(() => {\n    setChecked(users && selectedUser.length === users.length)('all');\n  }, [selectedUser, users, setChecked]);\n\n  const setCheckedAll = boolean => {\n    const checked = setChecked(boolean);\n    users.forEach(checked);\n  };\n\n  const cleanSelects = () => {\n    setSelectedUser([]);\n    setCheckedAll(false);\n  };\n\n  const selectAll = ({\n    target\n  }) => {\n    if (target.checked) {\n      setSelectedUser([].concat(users));\n      setCheckedAll(true);\n    } else {\n      cleanSelects();\n    }\n  };\n\n  const selectRow = event => {\n    const target = event.target;\n    const targetId = typeof target.value === \"string\" ? Number(target.value) : target.value;\n\n    if (target && target.checked) {\n      const changedUsers = users.filter(user => user.id === targetId);\n      setSelectedUser(selectedUser.concat(changedUsers));\n    }\n\n    if (target && !target.checked) setSelectedUser(selectedUser.filter(user => user.id !== targetId));\n  };\n\n  return {\n    selectedUser,\n    selectAll,\n    selectRow,\n    cleanSelects\n  };\n};","map":{"version":3,"sources":["/home/deathsmell/WebstormProjects/iAuthManager/client/src/hooks/select.hook.js"],"names":["useCallback","useContext","useEffect","UserContext","SelectContext","useSelect","users","selectedUser","setSelectedUser","setChecked","boolean","id","elementById","document","getElementById","checked","length","setCheckedAll","forEach","cleanSelects","selectAll","target","concat","selectRow","event","targetId","value","Number","changedUsers","filter","user"],"mappings":"AAAA,SAAQA,WAAR,EAAqBC,UAArB,EAAiCC,SAAjC,QAAiD,OAAjD;AACA,SAAQC,WAAR,QAA0B,wBAA1B;AACA,SAAQC,aAAR,QAA4B,0BAA5B;AAEA,OAAO,MAAMC,SAAS,GAAG,MAAM;AAC3B,QAAM,CAACC,KAAD,IAAUL,UAAU,CAACE,WAAD,CAA1B;AACA,QAAM,CAACI,YAAD,EAAeC,eAAf,IAAkCP,UAAU,CAACG,aAAD,CAAlD;AAIA,QAAMK,UAAU,GAAGT,WAAW,CAAEU,OAAD,IAAa;AACxC,WAAQC,EAAD,IAAQ;AACX,YAAMC,WAAW,GAAGC,QAAQ,CAACC,cAAT,CAAwBH,EAAE,CAACA,EAAH,GAAQA,EAAE,CAACA,EAAX,GAAgB,KAAxC,CAApB;;AACA,UAAIC,WAAJ,EAAiB;AACbA,QAAAA,WAAW,CAACG,OAAZ,GAAsBL,OAAtB;AACH;AACJ,KALD;AAMH,GAP6B,EAO3B,EAP2B,CAA9B;AASAR,EAAAA,SAAS,CAAC,MAAM;AACZO,IAAAA,UAAU,CAACH,KAAK,IAAKC,YAAY,CAACS,MAAb,KAAwBV,KAAK,CAACU,MAAzC,CAAV,CAA4D,KAA5D;AACH,GAFQ,EAEN,CAACT,YAAD,EAAeD,KAAf,EAAsBG,UAAtB,CAFM,CAAT;;AAIA,QAAMQ,aAAa,GAAIP,OAAD,IAAa;AAC/B,UAAMK,OAAO,GAAGN,UAAU,CAACC,OAAD,CAA1B;AACAJ,IAAAA,KAAK,CAACY,OAAN,CAAcH,OAAd;AACH,GAHD;;AAKA,QAAMI,YAAY,GAAG,MAAM;AACvBX,IAAAA,eAAe,CAAC,EAAD,CAAf;AACAS,IAAAA,aAAa,CAAC,KAAD,CAAb;AACH,GAHD;;AAKA,QAAMG,SAAS,GAAG,CAAC;AAACC,IAAAA;AAAD,GAAD,KAAc;AAC5B,QAAIA,MAAM,CAACN,OAAX,EAAoB;AAChBP,MAAAA,eAAe,CAAC,GAAGc,MAAH,CAAUhB,KAAV,CAAD,CAAf;AACAW,MAAAA,aAAa,CAAC,IAAD,CAAb;AACH,KAHD,MAGO;AACHE,MAAAA,YAAY;AACf;AACJ,GAPD;;AASA,QAAMI,SAAS,GAAIC,KAAD,IAAW;AACzB,UAAMH,MAAM,GAAGG,KAAK,CAACH,MAArB;AACA,UAAMI,QAAQ,GAAG,OAAOJ,MAAM,CAACK,KAAd,KAAwB,QAAxB,GACXC,MAAM,CAACN,MAAM,CAACK,KAAR,CADK,GAEXL,MAAM,CAACK,KAFb;;AAGA,QAAIL,MAAM,IAAIA,MAAM,CAACN,OAArB,EAA8B;AAC1B,YAAMa,YAAY,GAAGtB,KAAK,CAACuB,MAAN,CAAaC,IAAI,IAAIA,IAAI,CAACnB,EAAL,KAAYc,QAAjC,CAArB;AACAjB,MAAAA,eAAe,CAACD,YAAY,CAACe,MAAb,CAAoBM,YAApB,CAAD,CAAf;AACH;;AACD,QAAIP,MAAM,IAAI,CAACA,MAAM,CAACN,OAAtB,EACIP,eAAe,CAACD,YAAY,CAACsB,MAAb,CAAoBC,IAAI,IAAIA,IAAI,CAACnB,EAAL,KAAYc,QAAxC,CAAD,CAAf;AACP,GAXD;;AAaA,SAAO;AAAClB,IAAAA,YAAD;AAAea,IAAAA,SAAf;AAA0BG,IAAAA,SAA1B;AAAqCJ,IAAAA;AAArC,GAAP;AACH,CApDM","sourcesContent":["import {useCallback, useContext, useEffect} from 'react'\nimport {UserContext} from \"../context/UserContext\";\nimport {SelectContext} from \"../context/SelectContext\";\n\nexport const useSelect = () => {\n    const [users] = useContext(UserContext)\n    const [selectedUser, setSelectedUser] = useContext(SelectContext)\n\n\n\n    const setChecked = useCallback((boolean) => {\n        return (id) => {\n            const elementById = document.getElementById(id.id ? id.id : \"all\");\n            if (elementById) {\n                elementById.checked = boolean\n            }\n        }\n    }, [])\n\n    useEffect(() => {\n        setChecked(users && (selectedUser.length === users.length))('all')\n    }, [selectedUser, users, setChecked])\n\n    const setCheckedAll = (boolean) => {\n        const checked = setChecked(boolean);\n        users.forEach(checked)\n    }\n\n    const cleanSelects = () => {\n        setSelectedUser([])\n        setCheckedAll(false)\n    }\n\n    const selectAll = ({target}) => {\n        if (target.checked) {\n            setSelectedUser([].concat(users))\n            setCheckedAll(true)\n        } else {\n            cleanSelects()\n        }\n    }\n\n    const selectRow = (event) => {\n        const target = event.target\n        const targetId = typeof target.value === \"string\"\n            ? Number(target.value)\n            : target.value\n        if (target && target.checked) {\n            const changedUsers = users.filter(user => user.id === targetId);\n            setSelectedUser(selectedUser.concat(changedUsers))\n        }\n        if (target && !target.checked)\n            setSelectedUser(selectedUser.filter(user => user.id !== targetId))\n    }\n\n    return {selectedUser, selectAll, selectRow, cleanSelects}\n}"]},"metadata":{},"sourceType":"module"}